ARG ALPINE_IMAGE=blcksync/alpine-node:latest
FROM $ALPINE_IMAGE
# https://hub.docker.com/_/alpine/

LABEL maintainer="matr1xc0in"

USER root

# Reference: https://github.com/docker-library/golang/blob/master/1.11/alpine3.8/Dockerfile
RUN apk add --no-cache \
		bash ca-certificates \
    && [ ! -e /etc/nsswitch.conf ] && echo 'hosts: files dns' > /etc/nsswitch.conf

ENV GOLANG_VERSION 1.11.2

RUN set -eux; \
	apk add --no-cache --virtual .build-deps \
		bash \
		gcc \
		musl-dev \
		openssl \
		go \
	; \
	export \
		GOROOT_BOOTSTRAP="$(go env GOROOT)" \
		GOOS="$(go env GOOS)" \
		GOARCH="$(go env GOARCH)" \
		GOHOSTOS="$(go env GOHOSTOS)" \
		GOHOSTARCH="$(go env GOHOSTARCH)" \
	; \
	apkArch="$(apk --print-arch)"; \
	case "$apkArch" in \
		armhf) export GOARM='6' ;; \
		x86) export GO386='387' ;; \
	esac; \
	\
	wget -O go.tgz "https://golang.org/dl/go$GOLANG_VERSION.src.tar.gz"; \
	echo '042fba357210816160341f1002440550e952eb12678f7c9e7e9d389437942550 *go.tgz' | sha256sum -c -; \
	tar -C /usr/local -xzf go.tgz; \
	rm go.tgz; \
	\
	cd /usr/local/go/src; \
	for p in /go-alpine-patches/*.patch; do [ -f "$p" ] || continue; patch -p2 -i "$p"; done; \
	./make.bash; \
	rm -rf /go-alpine-patches; \
	apk del .build-deps; \
	export PATH="/usr/local/go/bin:$PATH"; \
	go version

ENV GOPATH /go
ENV PATH $GOPATH/bin:/usr/local/go/bin:$PATH

RUN mkdir -p "$GOPATH/src" "$GOPATH/bin" && chmod -R 777 "$GOPATH" \
    && echo "export PATH=/usr/local/go/bin:\$GOPATH/bin:\$PATH" > /etc/profile.d/go_path.sh

WORKDIR $GOPATH
